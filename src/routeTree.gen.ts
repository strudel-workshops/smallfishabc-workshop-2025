/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './pages/__root';
import { Route as IndexImport } from './pages/index';
import { Route as MetfishLayoutImport } from './pages/metfish/_layout';
import { Route as MetfishLayoutIndexImport } from './pages/metfish/_layout/index';

// Create Virtual Routes

const MetfishImport = createFileRoute('/metfish')();

// Create/Update Routes

const MetfishRoute = MetfishImport.update({
  id: '/metfish',
  path: '/metfish',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const MetfishLayoutRoute = MetfishLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => MetfishRoute,
} as any);

const MetfishLayoutIndexRoute = MetfishLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MetfishLayoutRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/metfish': {
      id: '/metfish';
      path: '/metfish';
      fullPath: '/metfish';
      preLoaderRoute: typeof MetfishImport;
      parentRoute: typeof rootRoute;
    };
    '/metfish/_layout': {
      id: '/metfish/_layout';
      path: '/metfish';
      fullPath: '/metfish';
      preLoaderRoute: typeof MetfishLayoutImport;
      parentRoute: typeof MetfishRoute;
    };
    '/metfish/_layout/': {
      id: '/metfish/_layout/';
      path: '/';
      fullPath: '/metfish/';
      preLoaderRoute: typeof MetfishLayoutIndexImport;
      parentRoute: typeof MetfishLayoutImport;
    };
  }
}

// Create and export the route tree

interface MetfishLayoutRouteChildren {
  MetfishLayoutIndexRoute: typeof MetfishLayoutIndexRoute;
}

const MetfishLayoutRouteChildren: MetfishLayoutRouteChildren = {
  MetfishLayoutIndexRoute: MetfishLayoutIndexRoute,
};

const MetfishLayoutRouteWithChildren = MetfishLayoutRoute._addFileChildren(
  MetfishLayoutRouteChildren
);

interface MetfishRouteChildren {
  MetfishLayoutRoute: typeof MetfishLayoutRouteWithChildren;
}

const MetfishRouteChildren: MetfishRouteChildren = {
  MetfishLayoutRoute: MetfishLayoutRouteWithChildren,
};

const MetfishRouteWithChildren =
  MetfishRoute._addFileChildren(MetfishRouteChildren);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/metfish': typeof MetfishLayoutRouteWithChildren;
  '/metfish/': typeof MetfishLayoutIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/metfish': typeof MetfishLayoutIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/metfish': typeof MetfishRouteWithChildren;
  '/metfish/_layout': typeof MetfishLayoutRouteWithChildren;
  '/metfish/_layout/': typeof MetfishLayoutIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/metfish' | '/metfish/';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/metfish';
  id: '__root__' | '/' | '/metfish' | '/metfish/_layout' | '/metfish/_layout/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  MetfishRoute: typeof MetfishRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MetfishRoute: MetfishRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/metfish"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/metfish": {
      "filePath": "metfish",
      "children": [
        "/metfish/_layout"
      ]
    },
    "/metfish/_layout": {
      "filePath": "metfish/_layout.tsx",
      "parent": "/metfish",
      "children": [
        "/metfish/_layout/"
      ]
    },
    "/metfish/_layout/": {
      "filePath": "metfish/_layout/index.tsx",
      "parent": "/metfish/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
